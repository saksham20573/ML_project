# -*- coding: utf-8 -*-
"""MLProject_EDA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rR7LA9ZNutEwWwG-3TWCKavWMTos5cwQ

# Imports
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import numpy as np
import math
import random
import matplotlib.pyplot as plt
# import utils

from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import classification_report
from sklearn.metrics import accuracy_score
from sklearn.ensemble import AdaBoostClassifier
from sklearn import preprocessing
import seaborn as sns
palette=sns.color_palette("Spectral")
sns.set_palette(palette)

"""# Data Read"""

#  Loading the database
url = "/content/drive/MyDrive/zomato.csv"
df = pd.read_csv(url)
print(df.head)

"""# Exploratory Data Analysis"""

df.describe

df.info()

"""We can drop dish_liked column since it contains a lot of null values."""

df.isnull().sum()

df.reviews_list.head()

df.rate.unique()

#Converting 'NEW' and '-' fields to 0 and changing rate to floats
def n(num):
  return num!=num
for i in range(len(df)):
  if(str(df.loc[i,"rate"])=='-' or str(df.loc[i,"rate"])=='NEW' or n((df.loc[i,"rate"]))):
    df.loc[i,"rate"]='0/5'
  df.loc[i,"rate"]=float(''.join(str(df.loc[i,"rate"]).split())[:-2])

def n(num):
  return num!=num
for i in range(len(df)):
  if(n(df.loc[i,"approx_cost(for two people)"])):
    df.loc[i,"approx_cost(for two people)"]='0'
  df.loc[i,"approx_cost(for two people)"]=str(df.loc[i,"approx_cost(for two people)"]).replace(",","")

df["approx_cost(for two people)"].unique()

fig,ax=plt.subplots(8,2,figsize=(15,25))
for v,subplot in zip(df.columns,ax.flatten()):
  sns.boxplot(x=df["rate"],ax=subplot)
plt.tight_layout()

df=df.drop(['dish_liked'],axis=1)
df=df.drop(['url', 'address', 'phone', 'menu_item'], axis=1)
df=df.dropna()
df=df.drop_duplicates()

df['reviews_list'].apply(lambda row: len(row))

# histplot for rate feature
_=sns.histplot(x='rate',data=df)

df.plot.scatter(x='rate',y='votes')

df.name.value_counts()

df.rest_type.value_counts()

# histplot for approx cost feature
_=sns.countplot(x='approx_cost(for two people)',data=df)

_=sns.countplot(x=np.log(df['votes']+1),data=df)

_=sns.histplot(x=np.log(df['votes']+1),data=df)

a=df.name.value_counts()
plt.plot(a[0:5])
plt.show()

#rating counts using book_table as legend
fig = plt.figure(figsize=[15,4])
plt.title("rating count plot based on book_table ")
sns.countplot(x="listed_in(type)", hue="book_table", data=df)
plt.show()

print(df.head)

